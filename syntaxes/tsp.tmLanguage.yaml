copyright: >
  This file is adapted by Tektronix from lua.tmLanguage.json at commit
      74c270e8878ceeed9a85e11b2621779eaa525bac
  available at {https://github.com/microsoft/vscode/tree/74c270e8878ceeed9a85e11b2621779eaa525bac/extensions/lua/syntaxes}.

  It includes content for docstring highlighting adapted by Tektronix from
  JavaScript.tmLanguage.json at commit
      56d3f0acf27ac43140164ded85266d017b568027
  available at {https://github.com/microsoft/vscode/tree/56d3f0acf27ac43140164ded85266d017b568027/extensions/javascript/syntaxes}.

  Except as otherwise noted, the content of this file is licensed under the
  MIT license. The text of the MIT license is reproduced below.

  ----------------------------------------------------------------------------

  MIT License

  Copyright (c) 2015 - 2018 Microsoft Corporation
  Copyright (c) 2019 Tektronix Inc.

  All rights reserved.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

version: https://github.com/microsoft/vscode/commit/74c270e8878ceeed9a85e11b2621779eaa525bac
name: tsp
scopeName: source.tsp

patterns:
  - {include: "#function_declaration"}
  - {include: "#function_call"}
  - {include: "#hex"}
  - {include: "#float"}
  - {include: "#int"}
  - {include: "#char_string"}
  - {include: "#normal_string"}
  - {include: "#long_string"}
  - {include: "#shebang"}
  - {include: "#comment"}
  - {include: "#control_keywords"}
  - {include: "#constant"}
  - {include: "#builtins"}
  - {include: "#operators"}
  - {include: "#identifier"}

repository:
  function_declaration:
    begin: >
      (?x)
        \b
        (?:(local)\s+)?
        (function)\s*
        (?:
          \s+
          (
            [a-zA-Z_][a-zA-Z0-9_]*              # Root function name.
            (?:([\.:])[a-zA-Z_][a-zA-Z0-9_]*)?  # Optional namespace accessor.
          )
          \s*   # Optional spacing between the function name and its opening parenthesis.
        )?      # Optional function name. Allows for anonymous functions.
        (\()
    beginCaptures:
      "1": {name: storage.modifier.local.tsp}
      "2": {name: keyword.control.tsp}
      "3": {name: entity.name.function.tsp}
      "4": {name: punctuation.separator.parameter.tsp}
      "5": {name: punctuation.definition.parameters.begin.tsp}
    end: \)
    endCaptures:
      "0": {name: punctuation.definition.parameters.end.tsp}
    name: meta.function.tsp
    patterns:
      - match: >
          (?x)
            (?<![^.]\.|:) # Do not match when used as part of an accessor.
            \b(self)\b
        name: variable.language.self.tsp

      - match: >
          (?x)
            (?<![^.]\.|:) # Do not match when used as part of an accessor.
            # Vararg
            (?<=[,(\s])   # Must be preceeded by a comma, open parenthesis, or whitespace.
            \.{3}         # Is exactly three full-stop characters.
            (?!\.)        # Cannot be followed by a full-stop.
        name: keyword.operator.rest.tsp

      - {match: "[a-zA-Z_][a-zA-Z0-9_]*", name: variable.parameter.function.tsp}

      - {match: ",", name: punctuation.separator.arguments.tsp}

  function_call:
    match: \b([a-zA-Z_][a-zA-Z0-9_]*)\b(?=\s*(?:[({"']|\[\[))
    name: support.function.any-method.tsp

  # TODO docblock

  # TOKENS

  hex:
    match: >
      (?x)
        (?<![\w\d:]) # Do not match when preceeded by alphanumerics or an accessor.
        0[xX]\h+
    name: constant.numeric.integer.hexadecimal.tsp

  float:
    match: >
      (?x)
        (?<![\w:]) # Do not match when used as part of a word or accessor.
        (
          \d+\.\d*([eE][+-]?\d+)?
          |
          (?<![\d\.])\.\d+([eE][+-]?\d+)?
          |
          \d+[eE][+-]?\d+
        )
    name: constant.numeric.float.tsp

  int:
    match: >
      (?x)
        (?<![\w.:]) # Do not match when used as part of a word or accessor.
        \d+
    name: constant.numeric.integer.tsp

  char_string:
    begin: "'"
    beginCaptures:
      "0": {name: punctuation.definition.string.begin.tsp}
    end: "'"
    endCaptures:
      "0": {name: punctuation.definition.string.end.tsp}
    name: string.quoted.single.tsp
    patterns:
      - {include: "#escape_sequence"}

  normal_string:
    begin: '"'
    beginCaptures:
      "0": {name: punctuation.definition.string.begin.tsp}
    end: '"'
    endCaptures:
      "0": {name: punctuation.definition.string.end.tsp}
    name: string.quoted.double.tsp
    patterns:
      - {include: "#escape_sequence"}

  long_string:
    begin: >
      (?x)
        (?<![\-]{2})  # Do not match when preceeded by two hyphen-minus characters.
        \[\[
    beginCaptures:
      "0": {name: punctuation.definition.string.begin.tsp}
    end: \]\]
    endCaptures:
      "0": {name: punctuation.definition.string.end.tsp}
    name: string.quoted.other.multiline.tsp

  shebang:
    match: \A(#!).*$
    name: comment.line.shebang.tsp

  comment:
    begin: (^[ \t]+)?(?=--)
    beginCaptures:
      "1": {name: punctuation.whitespace.comment.leading.tsp}
    end: (?!\G)((?<!^)[ \t]+$)?
    endCaptures:
      "1": {name: punctuation.whitespace.comment.trailing.tsp}
    patterns:
      - begin: --\[\[\[
        beginCaptures:
          "0": {name: punctuation.definition.comment.begin.tsp}
        end: \]\]
        endCaptures:
          "0": {name: punctuation.definition.comment.end.tsp}
        name: comment.block.documentation.tsp
        # patterns:
        #   - {include: "#docblock"}

      - begin: --\[\[(?!\[)
        beginCaptures:
          "0": {name: punctuation.definition.comment.begin.tsp}
        end: \]\]
        endCaptures:
          "0": {name: punctuation.definition.comment.end.tsp}
        name: comment.block.tsp

      - begin: --
        beginCaptures:
          "0": {name: punctuation.definition.comment.begin.tsp}
        end: $
        endCaptures:
          "0": {name: punctuation.definition.comment.end.tsp}
        name: comment.line.double-dash.tsp

  control_keywords:
    match: >
      (?x)
        \b
        (
          break|
          do|
          else|elseif|end|
          for|function|
          if|in|
          local|
          repeat|return|
          then|
          until|
          while
        )
        \b
    name: keyword.control.tsp

  constant:
    match: >
      (?x)
        (?<![^.]\.|:)       # Do not match when used as part of an accessor.
        \b
        (
          _G|_VERSION|
          nil|
          true|false|
          math\.(pi|huge)
        )
        \b
    name: constant.language.tsp

  builtins:
    patterns:
      - match: >
          (?x)
            (?<![^.]\.|:)           # Do not match when used as part of an accessor.
            \b
            (
              assert|
              collectgarbage|
              dofile|
              error|
              gcinfo|getfenv|getmetatable|
              ipairs|
              loadfile|loadstring|
              next|
              pairs|pcall|print|
              rawequal|rawget|rawset|require|
              setfenv|setmetatable|
              tonumber|tostring|type|
              unpack|
              xpcall
            )
            \b
            (?=\s*(?:[({"']|\[\[))  # Must be followed by a valid parameter starting character.
        name: support.function.tsp
      - match: >
          (?x)
            (?<![^.]\.|:)           # Do not match when used as part of an accessor.
            \b
            (
              coroutine\.(create|resume|status|wrap|yield)|
              string\.(
                byte|
                char|
                dump|
                find|format|
                gsub|
                len|lower|
                rep|
                sub|
                upper
              )|
              table\.(concat|insert|remove|sort)|
              math\.(
                abs|acos|asin|atan2?|
                ceil|cos|
                deg|
                exp|
                floor|frexp|
                ldexp|log|log10|
                max|min|
                pow|
                rad|random|randomseed|
                sin|sqrt|
                tan
              )|
              io\.(close|flush|input|open|output|read|type|write)|
              os\.(
                clock|
                date|difftime|
                execute|exit|
                getenv|
                remove|rename|
                setlocale|
                time|tmpname
              )|
              debug\.(
                debug|
                getinfo|
                [gs]ethook|
                [gs]etlocal|
                [gs]etupvalue|
                traceback
              )
            )
            \b
            (?=\s*(?:[({"']|\[\[))  # Must be followed by a valid parameter starting character.
        name: support.function.library.tsp

  operators:
    patterns:
      - match: \b(and|or|not)\b
        name: keyword.operator.tsp

      - match: >
          (?x)
            \+ |
            \- |
            \* |
            \/ |
            \^\^? |
            (?<![~!<>])==? |
            ~= |
            \!=? |
            <( < | = )? |
            \>( > | = )? |
            \| |
            \& |
            (?<!\.)\.{2}(?!\.)
        name: keyword.operator.tsp

  identifier:
    match: >
      (?x)
        (?<=[^.]\.|:)       # Match when used as part of an accessor.
        \b
        ([a-zA-Z_][a-zA-Z0-9_]*)
    name: variable.other.tsp

  # TOKEN FRAGMENTS

  escape_sequence:
    patterns:
      - match: \\[abfnrtv"'\[\]\\]
        name: constant.character.escape.tsp
      - match: \\[0-2]?\d{1,2}
        name: constant.character.escape.byte.tsp
      - match: \\x\h{1,2}
        name: constant.character.escape.byte.tsp
      - match: \\\r?\n
        name: punctuation.separator.continuation.tsp
      - match: \\\.
        name: invalid.illegal.character.escape.tsp
